unit ITDevCon.Tools.ProjectMgr.Explorer;

interface

uses
  System.Classes,
  ToolsAPI;

type

  TExplorerProjectMenuItemCreator = class(TNotifierObject,
    IOTAProjectMenuItemCreatorNotifier)
  private
  public
    procedure AddMenu(const Project: IOTAProject; const IdentList: TStrings;
      const ProjectManagerMenuList: IInterfaceList; IsMultiSelect: Boolean);
  end;

  TExplorerProjectMenuItemHelper = class(TNotifierObject, IOTALocalMenu,
    IOTAProjectManagerMenu)
  private
    FPosition: Integer;
  public
    constructor Create(APosition: Integer);
    { IOTALocalMenu }
    function GetCaption: string;
    function GetChecked: Boolean;
    function GetEnabled: Boolean;
    function GetHelpContext: Integer;
    function GetName: string;
    function GetParent: string;
    function GetPosition: Integer;
    function GetVerb: string;
    procedure SetCaption(const Value: string);
    procedure SetChecked(Value: Boolean);
    procedure SetEnabled(Value: Boolean);
    procedure SetHelpContext(Value: Integer);
    procedure SetName(const Value: string);
    procedure SetParent(const Value: string);
    procedure SetPosition(Value: Integer);
    procedure SetVerb(const Value: string);
    { IOTAProjectManagerMenu }
    function GetIsMultiSelectable: Boolean;
    procedure SetIsMultiSelectable(Value: Boolean);
    procedure Execute(const MenuContextList: IInterfaceList); overload;
    function PreExecute(const MenuContextList: IInterfaceList): Boolean;
    function PostExecute(const MenuContextList: IInterfaceList): Boolean;
  end;

procedure Register;

implementation

uses
  System.SysUtils, Winapi.ShellAPI, Winapi.Windows;

resourcestring
  sCaption = 'Reveal in &Explorer';

procedure TExplorerProjectMenuItemCreator.AddMenu(const Project: IOTAProject;
  const IdentList: TStrings; const ProjectManagerMenuList: IInterfaceList;
  IsMultiSelect: Boolean);
const
  LContainers: array of string = [sFileContainer, sProjectContainer,
    sProjectGroupContainer, sDirectoryContainer];
var
  LIdentIndex: Integer;
  LIdentContainer: string;
  LProjectMgrIndex: Integer;
  LProjectMgrMenu: IOTAProjectManagerMenu;
  LPosition: Integer;
begin
  for LIdentIndex := 0 to IdentList.Count - 1 do
  begin
    LIdentContainer := IdentList[LIdentIndex];
    if LIdentContainer <> sFileContainer then
    begin
      // NOTE! this includes:
      // sProjectGroupContainer, sProjectContainer, sDirectoryContainer
      Continue;
    end;
    // Find a correct position for our menu.
    LPosition := 0;
    for LProjectMgrIndex := 0 to ProjectManagerMenuList.Count - 1 do
    begin
      LProjectMgrMenu := ProjectManagerMenuList.Items[LProjectMgrIndex]
        as IOTAProjectManagerMenu;
      if SameText(LProjectMgrMenu.Verb, 'Options') then
      begin
        LPosition := LProjectMgrMenu.Position + 1;
        Break;
      end;
    end;
    // Creates and add the menu item.
    ProjectManagerMenuList.Add(TExplorerProjectMenuItemHelper.Create
      (LPosition));
  end;
end;

constructor TExplorerProjectMenuItemHelper.Create(APosition: Integer);
begin
  inherited Create;
  FPosition := APosition;
end;

procedure TExplorerProjectMenuItemHelper.Execute(const MenuContextList
  : IInterfaceList);
var
  LContext: IOTAProjectMenuContext;
begin
  if MenuContextList.Count <= 0 then
    Exit;
  if not Supports(MenuContextList.Items[0], IOTAProjectMenuContext, LContext)
  then
    Exit;
  ShellExecute(0, 'open', PChar('explorer.exe'),
    PChar('/select, "' + LContext.Ident + '"'), nil, SW_NORMAL);
end;

function TExplorerProjectMenuItemHelper.GetCaption: string;
begin
  // This method should return the caption for
  // the menu item including its accelerator.
  Result := sCaption;
end;

function TExplorerProjectMenuItemHelper.GetChecked: Boolean;
begin
  // This method should return the caption for
  // the menu item including its accelerator.
  Result := False;
end;

function TExplorerProjectMenuItemHelper.GetEnabled: Boolean;
begin
  // This method should return whether the menu item
  // is enabled for the selected item. Note that the
  // other methods allow you to not even show the menu
  // for certain contexts therefore you might not
  // need to return false here.
  Result := True;
end;

function TExplorerProjectMenuItemHelper.GetHelpContext: Integer;
begin
  // This method should return the help context
  // integer to be used for this menu item.
  Result := 0;
end;

function TExplorerProjectMenuItemHelper.GetIsMultiSelectable: Boolean;
begin
  Result := False;
end;

function TExplorerProjectMenuItemHelper.GetName: string;
begin
  // This method should return the name for this menu item.
  // If this method returns an empty string then a name
  // will be automatically generated by the IDE.
  Result := 'ITDevCon_Tools_ExplorerMenu';
end;

function TExplorerProjectMenuItemHelper.GetParent: string;
begin
  // This method should return the parent menu for this menu item.
  Result := EmptyStr;
end;

function TExplorerProjectMenuItemHelper.GetPosition: Integer;
begin
  // This method should return the position within the
  // parent menu where this menu item should be positioned.
  Result := FPosition;
end;

function TExplorerProjectMenuItemHelper.GetVerb: string;
begin
  Result := GetName;
end;

function TExplorerProjectMenuItemHelper.PostExecute(const MenuContextList
  : IInterfaceList): Boolean;
begin
  Result := False;
end;

function TExplorerProjectMenuItemHelper.PreExecute(const MenuContextList
  : IInterfaceList): Boolean;
begin
  Result := False;
end;

procedure TExplorerProjectMenuItemHelper.SetCaption(const Value: string);
begin
  // Do nothing.
end;

procedure TExplorerProjectMenuItemHelper.SetChecked(Value: Boolean);
begin
  // Do nothing.
end;

procedure TExplorerProjectMenuItemHelper.SetEnabled(Value: Boolean);
begin
  // Do nothing.
end;

procedure TExplorerProjectMenuItemHelper.SetHelpContext(Value: Integer);
begin
  // Do nothing.
end;

procedure TExplorerProjectMenuItemHelper.SetIsMultiSelectable(Value: Boolean);
begin
  // Do nothing.
end;

procedure TExplorerProjectMenuItemHelper.SetName(const Value: string);
begin
  // Do nothing.
end;

procedure TExplorerProjectMenuItemHelper.SetParent(const Value: string);
begin
  // Do nothing.
end;

procedure TExplorerProjectMenuItemHelper.SetPosition(Value: Integer);
begin
  // Do nothing.
end;

procedure TExplorerProjectMenuItemHelper.SetVerb(const Value: string);
begin
  // Do nothing.
end;

var
  MenuIndex: Integer = -1;

procedure Register;
begin
  with BorlandIDEServices as IOTAProjectManager do
    MenuIndex := AddMenuItemCreatorNotifier
      (TExplorerProjectMenuItemCreator.Create());
end;

procedure Unregister;
begin
  if MenuIndex < 0 then
    Exit;
  with BorlandIDEServices as IOTAProjectManager do
    RemoveMenuItemCreatorNotifier(MenuIndex);
end;

initialization

finalization

Unregister;

end.
